# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `em-socksify` gem.
# Please instead update this file by running `bin/tapioca gem em-socksify`.

# source://em-socksify//lib/em-socksify/socksify.rb#1
module EventMachine
  private

  def add_oneshot_timer(_arg0); end
  def attach_fd(_arg0, _arg1); end
  def attach_sd(_arg0); end
  def bind_connect_server(_arg0, _arg1, _arg2, _arg3); end
  def close_connection(_arg0, _arg1); end
  def connect_server(_arg0, _arg1); end
  def connect_unix_server(_arg0); end
  def connection_paused?(_arg0); end
  def current_time; end
  def detach_fd(_arg0); end
  def epoll; end
  def epoll=(_arg0); end
  def epoll?; end
  def get_cipher_bits(_arg0); end
  def get_cipher_name(_arg0); end
  def get_cipher_protocol(_arg0); end
  def get_comm_inactivity_timeout(_arg0); end
  def get_connection_count; end
  def get_file_descriptor(_arg0); end
  def get_heartbeat_interval; end
  def get_idle_time(_arg0); end
  def get_max_timer_count; end
  def get_peer_cert(_arg0); end
  def get_peername(_arg0); end
  def get_pending_connect_timeout(_arg0); end
  def get_proxied_bytes(_arg0); end
  def get_simultaneous_accept_count; end
  def get_sni_hostname(_arg0); end
  def get_sock_opt(_arg0, _arg1, _arg2); end
  def get_sockname(_arg0); end
  def get_subprocess_pid(_arg0); end
  def get_subprocess_status(_arg0); end
  def initialize_event_machine; end
  def invoke_popen(_arg0); end
  def is_notify_readable(_arg0); end
  def is_notify_writable(_arg0); end
  def kqueue; end
  def kqueue=(_arg0); end
  def kqueue?; end
  def library_type; end
  def num_close_scheduled; end
  def open_udp_socket(_arg0, _arg1); end
  def pause_connection(_arg0); end
  def read_keyboard; end
  def release_machine; end
  def report_connection_error_status(_arg0); end
  def resume_connection(_arg0); end
  def run_machine; end
  def run_machine_once; end
  def run_machine_without_threads; end
  def send_data(_arg0, _arg1, _arg2); end
  def send_datagram(_arg0, _arg1, _arg2, _arg3, _arg4); end
  def send_file_data(_arg0, _arg1); end
  def set_comm_inactivity_timeout(_arg0, _arg1); end
  def set_heartbeat_interval(_arg0); end
  def set_max_timer_count(_arg0); end
  def set_notify_readable(_arg0, _arg1); end
  def set_notify_writable(_arg0, _arg1); end
  def set_pending_connect_timeout(_arg0, _arg1); end
  def set_rlimit_nofile(_arg0); end
  def set_simultaneous_accept_count(_arg0); end
  def set_sock_opt(_arg0, _arg1, _arg2, _arg3); end
  def set_timer_quantum(_arg0); end
  def set_tls_parms(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9); end
  def setuid_string(_arg0); end
  def signal_loopbreak; end
  def ssl?; end
  def start_proxy(_arg0, _arg1, _arg2, _arg3); end
  def start_tcp_server(_arg0, _arg1); end
  def start_tls(_arg0); end
  def start_unix_server(_arg0); end
  def stop; end
  def stop_proxy(_arg0); end
  def stop_tcp_server(_arg0); end
  def stopping?; end
  def unwatch_filename(_arg0); end
  def unwatch_pid(_arg0); end
  def watch_filename(_arg0); end
  def watch_pid(_arg0); end

  class << self
    # source://eventmachine/1.2.7/lib/em/callback.rb#47
    def Callback(object = T.unsafe(nil), method = T.unsafe(nil), &blk); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1563
    def _open_file_for_writing(filename, handler = T.unsafe(nil)); end

    def add_oneshot_timer(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#351
    def add_periodic_timer(*args, &block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#291
    def add_shutdown_hook(&block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#323
    def add_timer(*args, &block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#741
    def attach(io, handler = T.unsafe(nil), *args, &blk); end

    def attach_fd(_arg0, _arg1); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#746
    def attach_io(io, watch_mode, handler = T.unsafe(nil), *args); end

    def attach_sd(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#541
    def attach_server(sock, handler = T.unsafe(nil), *args, &block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#661
    def bind_connect(bind_addr, bind_port, server, port = T.unsafe(nil), handler = T.unsafe(nil), *args); end

    def bind_connect_server(_arg0, _arg1, _arg2, _arg3); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#363
    def cancel_timer(timer_or_sig); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#261
    def cleanup_machine; end

    def close_connection(_arg0, _arg1); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#631
    def connect(server, port = T.unsafe(nil), handler = T.unsafe(nil), *args, &blk); end

    def connect_server(_arg0, _arg1); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#813
    def connect_unix_domain(socketname, *args, &blk); end

    def connect_unix_server(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#955
    def connection_count; end

    def connection_paused?(_arg0); end
    def current_time; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1043
    def defer(op = T.unsafe(nil), callback = T.unsafe(nil), errback = T.unsafe(nil), &blk); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1095
    def defers_finished?; end

    def detach_fd(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1440
    def disable_proxy(from); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1430
    def enable_proxy(from, to, bufsize = T.unsafe(nil), length = T.unsafe(nil)); end

    def epoll; end
    def epoll=(_arg0); end
    def epoll?; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1363
    def error_handler(cb = T.unsafe(nil), &blk); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1463
    def event_callback(conn_binding, opcode, data); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#243
    def fork_reactor(&block); end

    def get_cipher_bits(_arg0); end
    def get_cipher_name(_arg0); end
    def get_cipher_protocol(_arg0); end
    def get_comm_inactivity_timeout(_arg0); end
    def get_connection_count; end
    def get_file_descriptor(_arg0); end
    def get_heartbeat_interval; end
    def get_idle_time(_arg0); end
    def get_max_timer_count; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#924
    def get_max_timers; end

    def get_peer_cert(_arg0); end
    def get_peername(_arg0); end
    def get_pending_connect_timeout(_arg0); end
    def get_proxied_bytes(_arg0); end
    def get_simultaneous_accept_count; end
    def get_sni_hostname(_arg0); end
    def get_sock_opt(_arg0, _arg1, _arg2); end
    def get_sockname(_arg0); end
    def get_subprocess_pid(_arg0); end
    def get_subprocess_status(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1449
    def heartbeat_interval; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1458
    def heartbeat_interval=(time); end

    def initialize_event_machine; end
    def invoke_popen(_arg0); end
    def is_notify_readable(_arg0); end
    def is_notify_writable(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1574
    def klass_from_handler(klass = T.unsafe(nil), handler = T.unsafe(nil), *args); end

    def kqueue; end
    def kqueue=(_arg0); end
    def kqueue?; end
    def library_type; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1121
    def next_tick(pr = T.unsafe(nil), &block); end

    def num_close_scheduled; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#872
    def open_datagram_socket(address, port, handler = T.unsafe(nil), *args); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1235
    def open_keyboard(handler = T.unsafe(nil), *args); end

    def open_udp_socket(_arg0, _arg1); end
    def pause_connection(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1198
    def popen(cmd, handler = T.unsafe(nil), *args); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1227
    def reactor_running?; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#79
    def reactor_thread; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#227
    def reactor_thread?; end

    def read_keyboard; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#781
    def reconnect(server, port, handler); end

    def release_machine; end
    def report_connection_error_status(_arg0); end
    def resume_connection(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#149
    def run(blk = T.unsafe(nil), tail = T.unsafe(nil), &block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#218
    def run_block(&block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#967
    def run_deferred_callbacks; end

    def run_machine; end
    def run_machine_once; end
    def run_machine_without_threads; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#233
    def schedule(*a, &b); end

    def send_data(_arg0, _arg1, _arg2); end
    def send_datagram(_arg0, _arg1, _arg2, _arg3, _arg4); end
    def send_file_data(_arg0, _arg1); end
    def set_comm_inactivity_timeout(_arg0, _arg1); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1168
    def set_descriptor_table_size(n_descriptors = T.unsafe(nil)); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1149
    def set_effective_user(username); end

    def set_heartbeat_interval(_arg0); end
    def set_max_timer_count(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#917
    def set_max_timers(ct); end

    def set_notify_readable(_arg0, _arg1); end
    def set_notify_writable(_arg0, _arg1); end
    def set_pending_connect_timeout(_arg0, _arg1); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#902
    def set_quantum(mills); end

    def set_rlimit_nofile(_arg0); end
    def set_simultaneous_accept_count(_arg0); end
    def set_sock_opt(_arg0, _arg1, _arg2, _arg3); end
    def set_timer_quantum(_arg0); end
    def set_tls_parms(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9); end
    def setuid_string(_arg0); end
    def signal_loopbreak; end

    # source://eventmachine/1.2.7/lib/em/spawnable.rb#69
    def spawn(&block); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1065
    def spawn_threadpool; end

    def ssl?; end
    def start_proxy(_arg0, _arg1, _arg2, _arg3); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#517
    def start_server(server, port = T.unsafe(nil), handler = T.unsafe(nil), *args, &block); end

    def start_tcp_server(_arg0, _arg1); end
    def start_tls(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#561
    def start_unix_domain_server(filename, *args, &block); end

    def start_unix_server(_arg0); end
    def stop; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#417
    def stop_event_loop; end

    def stop_proxy(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#551
    def stop_server(signature); end

    def stop_tcp_server(_arg0); end
    def stopping?; end

    # source://eventmachine/1.2.7/lib/em/processes.rb#112
    def system(cmd, *args, &cb); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1105
    def threadpool; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1109
    def threadpool_size; end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1109
    def threadpool_size=(_arg0); end

    # source://eventmachine/1.2.7/lib/em/tick_loop.rb#3
    def tick_loop(*a, &b); end

    def unwatch_filename(_arg0); end
    def unwatch_pid(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#731
    def watch(io, handler = T.unsafe(nil), *args, &blk); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1309
    def watch_file(filename, handler = T.unsafe(nil), *args); end

    def watch_filename(_arg0); end
    def watch_pid(_arg0); end

    # source://eventmachine/1.2.7/lib/eventmachine.rb#1340
    def watch_process(pid, handler = T.unsafe(nil), *args); end

    # source://eventmachine/1.2.7/lib/em/spawnable.rb#76
    def yield(&block); end

    # source://eventmachine/1.2.7/lib/em/spawnable.rb#81
    def yield_and_notify(&block); end
  end
end

# source://em-socksify//lib/em-socksify/errors.rb#39
module EventMachine::Connectify
  # source://em-socksify//lib/em-socksify/connectify.rb#19
  def connect_hook; end

  # source://em-socksify//lib/em-socksify/connectify.rb#35
  def connect_receive_data(data); end

  # source://em-socksify//lib/em-socksify/connectify.rb#27
  def connect_unhook; end

  # source://em-socksify//lib/em-socksify/connectify.rb#4
  def connectify(host, port, username = T.unsafe(nil), password = T.unsafe(nil), &blk); end
end

# source://em-socksify//lib/em-socksify/connect.rb#3
module EventMachine::Connectify::CONNECT
  # source://em-socksify//lib/em-socksify/connect.rb#4
  def connect_send_handshake; end

  private

  # source://em-socksify//lib/em-socksify/connect.rb#17
  def connect_parse_response; end
end

# source://em-socksify//lib/em-socksify/errors.rb#40
class EventMachine::Connectify::CONNECTError < ::Exception; end

class EventMachine::ConnectionError < ::RuntimeError; end
class EventMachine::ConnectionNotBound < ::RuntimeError; end
class EventMachine::InvalidSignature < ::RuntimeError; end
class EventMachine::NoHandlerForAcceptedConnection < ::RuntimeError; end

# source://em-socksify//lib/em-socksify/socksify.rb#3
module EventMachine::Socksify
  # source://em-socksify//lib/em-socksify/socksify.rb#20
  def socks_hook; end

  # source://em-socksify//lib/em-socksify/socksify.rb#40
  def socks_receive_data(data); end

  # source://em-socksify//lib/em-socksify/socksify.rb#32
  def socks_unhook(ip = T.unsafe(nil)); end

  # source://em-socksify//lib/em-socksify/socksify.rb#4
  def socksify(host, port, username = T.unsafe(nil), password = T.unsafe(nil), version = T.unsafe(nil), &blk); end
end

# source://em-socksify//lib/em-socksify/socks5.rb#4
module EventMachine::Socksify::SOCKS5
  # source://em-socksify//lib/em-socksify/socks5.rb#33
  def socks_send_authentication; end

  # source://em-socksify//lib/em-socksify/socks5.rb#15
  def socks_send_connect_request; end

  # source://em-socksify//lib/em-socksify/socks5.rb#5
  def socks_send_handshake; end

  private

  # source://em-socksify//lib/em-socksify/socks5.rb#107
  def socks_methods; end

  # parses socks 5 server responses as specified
  # on http://www.faqs.org/rfcs/rfc1928.html
  #
  # source://em-socksify//lib/em-socksify/socks5.rb#46
  def socks_parse_response; end
end

# source://em-socksify//lib/em-socksify/errors.rb#4
class EventMachine::Socksify::SOCKSError < ::Exception
  class << self
    # source://em-socksify//lib/em-socksify/errors.rb#5
    def define(message); end

    # source://em-socksify//lib/em-socksify/errors.rb#22
    def for_response_code(code); end
  end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::AddressTypeNotSupported < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::CommandNotSupported < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::ConnectionRefused < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::HostUnreachable < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::NetworkUnreachable < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::NotAllowed < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::ServerFailure < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

# source://em-socksify//lib/em-socksify/errors.rb#6
class EventMachine::Socksify::SOCKSError::TTLExpired < ::EventMachine::Socksify::SOCKSError
  # source://em-socksify//lib/em-socksify/errors.rb#7
  def initialize; end
end

class EventMachine::UnknownTimerFired < ::RuntimeError; end
class EventMachine::Unsupported < ::RuntimeError; end
