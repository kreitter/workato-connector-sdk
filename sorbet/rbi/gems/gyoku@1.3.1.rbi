# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gyoku` gem.
# Please instead update this file by running `bin/tapioca gem gyoku`.

# source://gyoku//lib/gyoku/version.rb#1
module Gyoku
  class << self
    # Translates a given +hash+ with +options+ to XML.
    #
    # source://gyoku//lib/gyoku.rb#12
    def xml(hash, options = T.unsafe(nil)); end

    # Converts a given Hash +key+ with +options+ into an XML tag.
    #
    # source://gyoku//lib/gyoku.rb#7
    def xml_tag(key, options = T.unsafe(nil)); end
  end
end

# source://gyoku//lib/gyoku/array.rb#7
class Gyoku::Array
  class << self
    # Iterates over a given +array+ with a Hash of +attributes+ and yields a builder +xml+
    # instance, the current +item+, any XML +attributes+ and the current +index+.
    #
    # source://gyoku//lib/gyoku/array.rb#61
    def iterate_array(xml, array, attributes, &block); end

    # Iterates over a given +array+ with a Hash of +attributes+ and yields a builder +xml+
    # instance, the current +item+, any XML +attributes+ and the current +index+.
    #
    # source://gyoku//lib/gyoku/array.rb#44
    def iterate_with_xml(array, key, attributes, options, &block); end

    # Takes a Hash of +attributes+ and the +index+ for which to return attributes
    # for duplicate tags.
    #
    # source://gyoku//lib/gyoku/array.rb#79
    def tag_attributes(attributes, index); end

    # Translates a given +array+ to XML. Accepts the XML +key+ to add the elements to,
    # whether to +escape_xml+ and an optional Hash of +attributes+.
    #
    # source://gyoku//lib/gyoku/array.rb#13
    def to_xml(array, key, escape_xml = T.unsafe(nil), attributes = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# source://gyoku//lib/gyoku/array.rb#9
Gyoku::Array::NESTED_ELEMENT_NAME = T.let(T.unsafe(nil), String)

# source://gyoku//lib/gyoku/hash.rb#8
class Gyoku::Hash
  class << self
    # Iterates over a given +hash+ and yields a builder +xml+ instance, the current
    # Hash +key+ and any XML +attributes+.
    #
    # Keys beginning with "@" are treated as explicit attributes for their container.
    # You can use both :attributes! and "@" keys to specify attributes.
    # In the event of a conflict, the "@" key takes precedence.
    #
    # source://gyoku//lib/gyoku/hash.rb#36
    def iterate_with_xml(hash); end

    # Deletes and returns an Array of keys stored under the :order! key of a given +hash+.
    # Defaults to return the actual keys of the Hash if no :order! key could be found.
    # Raises an ArgumentError in case the :order! Array does not match the Hash keys.
    #
    # @raise [ArgumentError]
    #
    # source://gyoku//lib/gyoku/hash.rb#68
    def order(hash); end

    # Translates a given +hash+ with +options+ to XML.
    #
    # source://gyoku//lib/gyoku/hash.rb#11
    def to_xml(hash, options = T.unsafe(nil)); end
  end
end

# source://gyoku//lib/gyoku/version.rb#2
Gyoku::VERSION = T.let(T.unsafe(nil), String)

# source://gyoku//lib/gyoku/xml_key.rb#2
module Gyoku::XMLKey
  class << self
    # Converts a given +object+ with +options+ to an XML key.
    #
    # source://gyoku//lib/gyoku/xml_key.rb#17
    def create(key, options = T.unsafe(nil)); end

    private

    # Chops special characters from the end of a given +string+.
    #
    # source://gyoku//lib/gyoku/xml_key.rb#53
    def chop_special_characters(string); end

    # Returns the formula for converting Symbol keys.
    #
    # source://gyoku//lib/gyoku/xml_key.rb#36
    def key_converter(options, xml_key); end

    # Returns whether to namespace all keys (elementFormDefault).
    #
    # @return [Boolean]
    #
    # source://gyoku//lib/gyoku/xml_key.rb#63
    def qualify?(options); end

    # Returns whether to remove the namespace from a given +key+.
    #
    # @return [Boolean]
    #
    # source://gyoku//lib/gyoku/xml_key.rb#58
    def unqualify?(key); end
  end
end

# source://gyoku//lib/gyoku/xml_value.rb#5
module Gyoku::XMLValue
  class << self
    # Converts a given +object+ to an XML value.
    #
    # source://gyoku//lib/gyoku/xml_value.rb#18
    def create(object, escape_xml = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end
